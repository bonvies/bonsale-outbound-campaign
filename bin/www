#!/usr/bin/env node
const { projects } = require('../routes/projectOutbound');
const { backupProjectsToBonsaleConfig } = require('../routes/projectOutbound');
const { getTaiwanTimestamp, logWithTimestamp, warnWithTimestamp, errorWithTimestamp } = require('../util/timestamp.js');

// 監聽程式結束的訊號
async function gracefulShutdown(signal) {
  logWithTimestamp(`收到 ${signal} 信號，開始備份專案資料...`);
  try {
    // 先停止伺服器接收新的請求
    server.close(() => {
      logWithTimestamp('HTTP server closed');
    });

    // 備份資料
    await backupProjectsToBonsaleConfig();
    logWithTimestamp('專案資料備份完成，準備關閉程式');
    process.exit(0);
  } catch (error) {
    errorWithTimestamp('備份失敗:', error);
    process.exit(1);
  }
}

// 監聽各種結束信號
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // docker container stop
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGHUP', () => gracefulShutdown('SIGHUP'));   // 終端機關閉

// 攔截未捕捉的錯誤，避免伺服器直接 crash
process.on('uncaughtException', (err) => {
  errorWithTimestamp('Uncaught Exception:', err);
  // 可選：決定是否 process.exit(1)
});
process.on('unhandledRejection', (reason, promise) => {
  errorWithTimestamp('Unhandled Rejection at:', promise, 'reason:', reason);
  // 可選：決定是否 process.exit(1)
});

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('bonsale-outbound-campaign:server');
const http = require('http');
const { clientWsProjectOutbound } = require('../routes/projectOutbound');
const { clientWsOutboundCampaigm } = require('../routes/outboundCampaigm');
const { clientWsWebHook } = require('../routes/bonsale');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.HTTP_PORT || '3020');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// 加入 WebSocket upgrade 處理
server.on('upgrade', (request, socket, head) => {
  if (request.url === '/ws/projectOutbound') {
    clientWsProjectOutbound.handleUpgrade(request, socket, head, (ws) => {
      clientWsProjectOutbound.emit('connection', ws, request);
    });
  } else if (request.url === '/ws/outboundCampaigm') {
    clientWsOutboundCampaigm.handleUpgrade(request, socket, head, (ws) => {
      clientWsOutboundCampaigm.emit('connection', ws, request);
    });
  } else if (request.url === '/ws/bonsaleWebHook') {
    clientWsWebHook.handleUpgrade(request, socket, head, (ws) => {
      clientWsWebHook.emit('connection', ws, request);
    });
  } else {
    socket.destroy();
  }
});

// TODO 目前 ngrok 是免費版的 是為了測試 Bonsale WebHook 所用 只在本地開發環境使用
// const ngrok = require('@ngrok/ngrok');
// ngrok.connect({ addr: port, authtoken: '2xcLfZYGdVrF5t6ftruUpRIJrk5_4g4rcBtzhWFcDw2pv4U8k' })
// 	.then(listener => console.log(`Ingress established at: ${listener.url()}`));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
